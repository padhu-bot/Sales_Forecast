# -*- coding: utf-8 -*-
"""Sales_Forecast.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vFwrwfKQrDtuxiEa6I-nh85yVvlMG92o

## Importing the required libraries
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LinearRegression
from xgboost import XGBRegressor
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error,mean_absolute_error,r2_score

"""## Load the datset"""

dataset=pd.read_csv("train.csv")

"""## EDA"""

dataset.head()

dataset.describe()

dataset.shape

dataset.dtypes

"""## Checking for Null"""

dataset.info()

"""## Remove unwanted data"""

dataset = dataset.groupby('date').sum('sales')
dataset.index = pd.to_datetime(dataset.index)
dataset = dataset.drop(['store','item'], axis=1)

dataset.head()

"""## Visualization"""

plt.figure(figsize=(15, 5))
plt.plot(dataset.index,dataset['sales'])
plt.title("Sales over period")
plt.xlabel("Sales")
plt.ylabel("date")

"""## Spliting Train and Test data"""

train_data,test_data=train_test_split(dataset,test_size=0.2,shuffle=False)
print(train_data)
print(test_data)

"""## Visualizing train and test data"""

fig, ax = plt.subplots(figsize=(15, 5))
train_data.plot(ax=ax, label='Training Set', title='Train/Test Split data')
test_data.plot(ax=ax, label='Test Set')
ax.legend(['Training Set', 'Test Set'])
plt.show()

dataset.loc[(dataset.index > '01-01-2013') & (dataset.index < '01-08-2013')] \
    .plot(figsize=(15, 5), title='Week sales')
plt.show()

dataset.loc[(dataset.index > '01-01-2013') & (dataset.index < '01-31-2013')] \
    .plot(figsize=(15, 5), title='Week sales')
plt.show()

"""## Feature Engineering"""

def create_features(df):
    """
    Creating time series features based on dataframe index.
    """
    df = df.copy()
    # df['hour'] = df.index.hour
    df['dayofweek'] = df.index.dayofweek
    df['quarter'] = df.index.quarter
    df['month'] = df.index.month
    df['year'] = df.index.year
    df['dayofyear'] = df.index.dayofyear
    df['dayofmonth'] = df.index.day
    df['weekofyear'] = df.index.isocalendar().week
    return df

df = create_features(dataset)

print(df)

week_day_map = {
    0: 'Monday',
    1: 'Tuesday',
    2: 'Wednesday',
    3: 'Thursday',
    4: 'Friday',
    5: 'Saturday',
    6: 'Sunday',
}
df_temp = df.copy()
df_temp['dayofweek'] = df_temp['dayofweek'].map(lambda index: week_day_map[index])

fig, ax = plt.subplots(figsize=(10, 8))
sns.boxplot(data=df_temp, x='dayofweek', y='sales')
ax.set_title('Sales on Week')
plt.show()

month_map = {
    1: 'Jan',
    2: 'Feb',
    3: 'Mar',
    4: 'Apr',
    5: 'May',
    6: 'Jun',
    7: 'Jul',
    8: 'Aug',
    9: 'Sep',
    10: 'Oct',
    11: 'Nov',
    12: 'Dec',
}
df_temp=df.copy()
df_temp['month']=df_temp['month'].map(lambda index:month_map[index])

fig, ax = plt.subplots(figsize=(10, 8))
sns.boxplot(data=df_temp, x='month', y='sales',palette='Blues')
ax.set_title('Monthly sales')
plt.show()

fig, ax = plt.subplots(figsize=(10, 8))
sns.boxplot(data=df, x='quarter', y='sales',palette='Greens')
ax.set_title('Sales on quater')
plt.show()

"""## Spliting into Features and Target"""

train_data=create_features(train_data)
test_data=create_features(test_data)

FEATURES = ['dayofyear', 'dayofweek', 'quarter', 'month', 'year']
TARGET = 'sales'

X_train = train_data[FEATURES]
y_train = train_data[TARGET]

X_test = test_data[FEATURES]
y_test = test_data[TARGET]

"""## Creating Linear Regression model

"""

lr=LinearRegression()
lr.fit(X_train,y_train)

test_data['lr_pred']=lr.predict(X_test)
df = df.merge(test_data[['lr_pred']], how='left', left_index=True, right_index=True)
ax = df[['sales']].plot(figsize=(15, 5))
df['lr_pred'].plot(ax=ax,style='.')
plt.legend(['Truth Data', 'Predictions'])
ax.set_title('Raw Data and Prediction')
plt.show()

linreg_rmse = np.sqrt(mean_squared_error(test_data['sales'], test_data['lr_pred']))
linreg_mae = mean_absolute_error(test_data['sales'], test_data['lr_pred'])
linreg_r2 = r2_score(test_data['sales'], test_data['lr_pred'])
print('Linear Regression RMSE: ', linreg_rmse)
print('Linear Regression MAE: ', linreg_mae)
print('Linear Regression R2 Score: ', linreg_r2)

"""## Random Forest"""

rf=RandomForestRegressor()
rf.fit(X_train,y_train)

test_data['rf_pred']=rf.predict(X_test)
df=df.merge(test_data[['rf_pred']],how='left',left_index=True,right_index=True)
ax = df[['sales']].plot(figsize=(15, 5))
df['rf_pred'].plot(ax=ax,style='.')
plt.legend(['Truth Data', 'Predictions'])
ax.set_title('Raw Data and Prediction')
plt.show()

rf_rmse = np.sqrt(mean_squared_error(test_data['sales'], test_data['rf_pred']))
rf_mae = mean_absolute_error(test_data['sales'], test_data['rf_pred'])
rf_r2 = r2_score(test_data['sales'], test_data['rf_pred'])
print('Random Forest RMSE: ', rf_rmse)
print('Random Forest MAE: ', rf_mae)
print('Random Forest R2 Score: ', rf_r2)

"""## XG Boost"""

reg = XGBRegressor(base_score=0.5, booster='gbtree',
                       n_estimators=1000,
                       early_stopping_rounds=50,
                       objective='reg:linear',
                       max_depth=3,
                       learning_rate=0.01)
reg.fit(X_train, y_train,
        eval_set=[(X_train, y_train), (X_test, y_test)],
        verbose=100)

test_data['prediction_xg'] = reg.predict(X_test)
df = df.merge(test_data[['prediction_xg']], how='left', left_index=True, right_index=True)
ax = df[['sales']].plot(figsize=(15, 5))
df['prediction_xg'].plot(ax=ax, style='.')
plt.legend(['Truth Data', 'Predictions'])
ax.set_title('Raw Data and Prediction')
plt.show()

xgb_rmse = np.sqrt(mean_squared_error(test_data['sales'], test_data['prediction_xg']))
xgb_mae = mean_absolute_error(test_data['sales'], test_data['prediction_xg'])
xgb_r2 = r2_score(test_data['sales'], test_data['prediction_xg'])
print('XGB RMSE: ', rf_rmse)
print('XGB Forest MAE: ', rf_mae)
print('XGB Forest R2 Score: ', rf_r2)

"""## Feature Importance"""

fi = pd.DataFrame(data=reg.feature_importances_,
             index=reg.get_booster().feature_names,
             columns=['importance'])
fi.sort_values('importance').plot(kind='barh', title='Feature Importance')
plt.show()

"""## Forecast on Test"""

ax = df.loc[(df.index > '01-01-2017') & (df.index < '01-08-2017')]['sales'] \
    .plot(figsize=(15, 5), title='Week Of Data')
df.loc[(df.index > '01-01-2017') & (df.index < '01-08-2017')]['prediction_xg'] \
    .plot()
plt.legend(['Truth Data','Prediction'])
plt.show()

"""## Comparing the performance of models"""

linreg_stats = [linreg_rmse, linreg_mae, linreg_r2]
rf_stats = [rf_rmse, rf_mae, rf_r2]
xgb_stats = [xgb_rmse, xgb_mae, xgb_r2]

plt.figure(figsize=(15,7))
plt.plot(linreg_stats)
plt.plot(rf_stats)
plt.plot(xgb_stats)
plt.title("Model Comparison between Linear Regression, Random Forest and XGboost")
plt.xticks([0,1,2], labels=['RMSE','MAE','R2 Score'])
plt.legend(["Linear Regression", "Random Forest", "XG Boost"])
plt.show()

"""## Assigning XG Boost as best prediction"""

test_data['prediction']=test_data['prediction_xg']
df['prediction']=df['prediction_xg']

"""## Calculate Error"""

test_data['error'] = np.abs(test_data[TARGET] - test_data['prediction'])
test_data['dates'] = test_data.index.date

test_data.groupby(['date'])['error'].mean().sort_values(ascending=False).head(10)

"""## Predict Yearly Future Values"""

to_predict = pd.DataFrame(pd.date_range(start="2018-01-01", end="2019-02-01"), columns=['date'])
to_predict.index = pd.to_datetime(to_predict.date)

to_predict_feature = create_features(to_predict)
to_predict_feature = to_predict_feature[FEATURES]

to_predict_feature['prediction'] = reg.predict(to_predict_feature)
ax = df[['sales']].plot(figsize=(15, 5))
df['prediction'].plot(ax=ax, style='.')
to_predict_feature['prediction'].plot(ax=ax)
plt.legend(['Truth Data', 'Predictions'])
ax.set_title('Raw Data and Prediction')
plt.show()

"""## For monthly prediction"""

to_predict = pd.DataFrame(pd.date_range(start="2018-01-01", end="2018-01-30"), columns=['date'])
to_predict.index = pd.to_datetime(to_predict.date)

to_predict_feature = create_features(to_predict)
to_predict_feature = to_predict_feature[FEATURES]

to_predict_feature['prediction'] = reg.predict(to_predict_feature)
ax = to_predict_feature['prediction'].plot(figsize=(15, 5), style='.')
to_predict_feature['prediction'].plot(ax=ax)
plt.legend(['Predictions'])
ax.set_title('One Month Prediction')
plt.show()